# generated by datamodel-codegen:
#   filename:  tmpiuhfk0uz.json
#   timestamp: 2025-10-06T15:51:40+00:00

from __future__ import annotations

from datetime import date
from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class ChecklistItem(BaseModel):
    item_id: Optional[int] = Field(
        None,
        description="Identifiant unique de l'élément de la checklist. Doit être vide dans le cas d'un nouvel élément.",
    )
    item_name: Optional[str] = Field(None, description="Description de l'élément de la checklist.")
    is_done: Optional[bool] = Field(None, description="Indique si l'élément est complété.")


class Priority(Enum):
    low = "low"
    medium = "medium"
    high = "high"


class Label(BaseModel):
    label_id: int = Field(..., description="Identifiant unique du libellé.")


class ResponseModel(BaseModel):
    task_id: Optional[int] = Field(
        None,
        description="Identifiant unique de la tâche. Doit être vide dans le cas d'une nouvelle tâche.",
    )
    title: str = Field(..., description="Titre de la tâche.")
    description: Optional[str] = Field(None, description="Description détaillée de la tâche.")
    checklist: Optional[List[ChecklistItem]] = Field(None, description="Liste des éléments à vérifier pour la tâche.")
    due_date: Optional[date] = Field(None, description="Date limite de la tâche.")
    list_id: Optional[int] = Field(None, description="Identifiant de la liste à laquelle appartient la tâche.")
    priority: Optional[Priority] = Field(None, description="Niveau de priorité de la tâche.")
    assignee_id: Optional[int] = Field(None, description="Identifiant de l'utilisateur assigné à la tâche.")
    labels: Optional[List[Label]] = Field(None, description="Liste des libellés associés à la tâche.")
