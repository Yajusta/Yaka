services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: yaka-backend
    ports:
      - "8000:8000"
    environment:
      - SMTP_HOST=${SMTP_HOST:-0.0.0.0}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER:-your_smtp_user}
      - SMTP_PASS=${SMTP_PASS:-your_smtp_pass}
      - SMTP_SECURE=${SMTP_SECURE:-starttls}
      - SMTP_FROM=${SMTP_FROM:-no-reply@yaka.local}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - OPENAI_API_BASE_URL=${OPENAI_API_BASE_URL:-https://api.openai.com/v1}
      - LLM_MODEL=${LLM_MODEL:-gpt-5-nano}
      - MODEL_TEMPERATURE=${MODEL_TEMPERATURE:-}
      - YAKA_ADMIN_API_KEY=${YAKA_ADMIN_API_KEY:-}
      - BASE_URL=${BASE_URL:-http://localhost:3000}
      - DEMO_MODE=${DEMO_MODE:-false}
      - DEFAULT_LANGUAGE=${DEFAULT_LANGUAGE:-fr}
      - ENVIRONMENT=${ENVIRONMENT:-production}
    volumes:
      - ./data/:/app/data/
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - yaka-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - DEMO_MODE=${DEMO_MODE:-false}
        - API_BASE_URL=${API_BASE_URL:-http://localhost:8000}
    container_name: yaka-frontend
    ports:
      - "3000:80"
    environment:
      - DEMO_MODE=${DEMO_MODE:-false}
      - BASE_URL=${BASE_URL:-http://localhost:3000}
      - API_BASE_URL=${API_BASE_URL:-http://localhost:8000}
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 300s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - yaka-network

  demo-cron:
    image: alpine:latest
    container_name: yaka-demo-cron
    environment:
      - DEMO_MODE=${DEMO_MODE:-false}
    depends_on:
      backend:
        condition: service_healthy
    command: >
      sh -c "
        if [ \"$DEMO_MODE\" = \"true\" ]; then
          echo 'üîÑ Mode d√©mo activ√© - Configuration du cron pour la r√©initialisation horaire'
          apk add --no-cache wget
          echo '0 * * * * wget -q -O - --method=POST http://yaka-backend:8000/demo/reset >/dev/null 2>&1' > /etc/crontabs/root
          echo 'üîÑ Cron configur√© pour r√©initialiser la base toutes les heures'
          crond -f -l 2
        else
          echo 'Mode d√©mo d√©sactiv√© - Cron en pause'
          sleep infinity
        fi
      "
    restart: unless-stopped
    networks:
      - yaka-network

# Optional: PostgreSQL database (uncomment if you want to use PostgreSQL instead of SQLite)
# db:
#   image: postgres:15-alpine
#   container_name: yaka-db
#   environment:
#     POSTGRES_DB: yaka
#     POSTGRES_USER: yaka_user
#     POSTGRES_PASSWORD: yaka_password
#   volumes:
#     - postgres_data:/var/lib/postgresql/data
#   ports:
#     - "5432:5432"
#   restart: unless-stopped
#   networks:
#     - yaka-network

volumes:
  yaka_data:
    driver: local
# postgres_data:
#   driver: local

networks:
  yaka-network:
    driver: bridge